from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from connection_manager import ConnectionManager
from googletrans import Translator

# Initialize FastAPI app and connection manager
app = FastAPI()
manager = ConnectionManager()

# Initialize Google Translate API
translator = Translator()

def translate_message(text: str, target_lang: str = "fr") -> str:
    """
    Translate the given text to the target language using Google Translate.
    :param text: The message text to translate
    :param target_lang: The language to translate to (default is French 'fr')
    :return: The translated message
    """
    try:
        # Translate the text
        result = translator.translate(text, dest=target_lang)
        return result.text
    except Exception as e:
        # In case of failure, return the error message
        return f"[Error: {str(e)}]

@app.websocket("/ws/{username}")
async def websocket_chat(websocket: WebSocket, username: str):
    """
    Handle WebSocket connections, receive messages, translate them, and send back.
    :param websocket: WebSocket connection
    :param username: The username of the client connecting
    """
    await manager.connect(username, web
